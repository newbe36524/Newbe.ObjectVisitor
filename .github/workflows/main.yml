name: build and scan

on:
  push:
    branches:
      - master
      - develop
      - feature/ci
      - feature/ut

  pull_request:
    branches:
      - master
      - develop

jobs:
  build:
    runs-on: windows-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    steps:
      - uses: actions/checkout@v2
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"newbe36524_Newbe.ObjectVisitor" /o:"newbe36524" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths='"src/Newbe.ObjectVisitor/*.Tests/TestResults/*/coverage.opencover.xml"'
          dotnet build $ENV:GITHUB_WORKSPACE/src --configuration Release
          dotnet test $ENV:GITHUB_WORKSPACE/src --configuration Release -l "console;verbosity=detailed" --collect:"XPlat Code Coverage" --settings $ENV:GITHUB_WORKSPACE/src/coverlet.runsettings -- NUnit.Where="namespace =~ ^Newbe"
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      # - name: Soanr scan
      #   run: |
      #     dotnet sonarscanner begin /k:"newbe36524_Newbe.ObjectVisitor" /d:sonar.cs.opencover.reportsPaths='"src/Newbe.ObjectVisitor/*.Tests/TestResults/*/coverage.opencover.xml"' /d:sonar.host.url=<value>
      #     dotnet build $ENV:GITHUB_WORKSPACE/src --configuration Release
      #     dotnet test $ENV:GITHUB_WORKSPACE/src --configuration Release -l "console;verbosity=detailed" --collect:"XPlat Code Coverage" --settings $ENV:GITHUB_WORKSPACE/src/coverlet.runsettings -- NUnit.Where="namespace =~ ^Newbe"
      #     dotnet sonarscanner end

      # - name: Sonarscanner for dotnet
      #   uses: Secbyte/dotnet-sonarscanner@master
      #   with:
      #     buildCommand: dotnet build $ENV:GITHUB_WORKSPACE/src --configuration Release
      #     testCommand: dotnet test $ENV:GITHUB_WORKSPACE/src --configuration Release -l "console;verbosity=detailed" --collect:"XPlat Code Coverage" --settings $ENV:GITHUB_WORKSPACE/src/coverlet.runsettings -- NUnit.Where="namespace =~ ^Newbe"
      #     projectKey: newbe36524_Newbe.ObjectVisitor
      #     projectName: Newbe.ObjectVisitor
      #     sonarOrganisation: newbe36524
      #     beginArguments: >
      #       /d:sonar.cs.opencover.reportsPaths='"src/Newbe.ObjectVisitor/*.Tests/TestResults/*/coverage.opencover.xml"'
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # - name: Codecov
      #   uses: codecov/codecov-action@master
      # with:
      #   # User defined upload name. Visible in Codecov UI
      #   name: # optional
      #   # Repository upload token - get it from codecov.io. Required only for private repositories
      #   token: # optional
      #   # Path to coverage file to upload
      #   file: # optional
      #   # Flag upload to group coverage metrics (e.g. unittests | integration | ui,chrome)
      #   flags: # optional
      #   # Specify whether or not CI build should fail if Codecov runs into an error during upload
      #   fail_ci_if_error: # optional
      - name: Codacy Coverage Reporter
        run: bash <(curl -s https://codecov.io/bash)
      # - name: Codacy Coverage Reporter
      #   uses: codacy/codacy-coverage-reporter-action@master
      #   with:
      #     # Project token for the Codacy project you want to send coverage information
      #     project-token: ${{ secrets.CODACY_TOKEN }}
      #     # Optional comma separated list of coverage reports to send to Codacy
      #     coverage-reports: src/*.Tests/TestResults/*/coverage.opencover.xml # optional, default is
