<Project>
 
  <PropertyGroup>
    <Authors>newbe36524</Authors>
    <Company>newbe36524</Company>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageProjectUrl>https://github.com/newbe36524/Newbe.ObjectVisitor</PackageProjectUrl>
    <RepositoryUrl>https://github.com/newbe36524/Newbe.ObjectVisitor</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <NoWarn>1701;1702;1705;</NoWarn>
    <LangVersion>8.0</LangVersion>
    <Nullable>enable</Nullable>
    <PackageIcon>icon.png</PackageIcon>
    <TargetFrameworks>net461;netstandard1.4;netcoreapp2.1;netcoreapp3.1;net5.0;</TargetFrameworks>
    <PackageReleaseNotes>
    </PackageReleaseNotes>
    <LangVersion>8.0</LangVersion>
    <Description>
Why do I need this?

- It is faster. This lib is impletmented with [Expression Trees](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/expression-trees/) that cost 1/10 time as in Reflection way.
- It is readable. This lib can generate a lambda func to handle the code flow you create that just as your hard coding without reflection.
- It is extendable. If you can visit all properties of a object in easy way, you can validate them as you wish, change some value if there are something sensitive, creare a mapper like automapper, and etc.
Github: https://github.com/newbe36524/Newbe.ObjectVisitor

Please check out the latest full API documents in site below:

- http://ov.newbe.pro
- http://cn.ov.newbe.pro
    </Description>
  </PropertyGroup>
  <ItemGroup Condition=" '$(IsPackable)' != 'false' ">
    <None Include="$(SolutionDir)/icon.png" Link="icon.png" Pack="true" PackagePath=""/>
  </ItemGroup>
  <ItemGroup Condition=" '$(IsUnitTest)' == 'true' ">
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="16.7.1"/>
    <PackageReference Include="NUnit" Version="3.12.0"/>
    <PackageReference Include="coverlet.collector" Version="1.3.0"/>
    <PackageReference Include="Autofac.Extras.Moq" Version="4.3.0"/>
    <PackageReference Include="FluentAssertions" Version="5.10.3"/>
  </ItemGroup>
</Project>